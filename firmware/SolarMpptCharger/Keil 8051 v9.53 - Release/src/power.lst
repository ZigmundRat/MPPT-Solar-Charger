C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\src/power.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.60\BIN\C51.
                    -exe /Users/danjulio/SimplicityStudio/v4_workspace/SolarMpptCharger/src/power.c OMF2 COMPACT DEBUG OBJECTEXTEND ROM(LARGE
                    -) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/danjulio/S
                    -implicityStudio/v4_workspace/SolarMpptCharger/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/80
                    -51/v4.1.7//Device/shared/si8051Base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.1.7//Dev
                    -ice/EFM8SB1/inc) REGFILE(SolarMpptCharger.ORC) PRINT(.\src/power.lst) COND SYMBOLS CODE PAGEWIDTH(120) PAGELENGTH(65) OB
                    -JECT(.\src/power.OBJ)

line level    source

   1          /*
   2           * power.c
   3           *
   4           * Output power control module:
   5           *  1. Sense IO_PCTRL_I bit
   6           *   - IO_PCTRL_I = 1 => IO_PWR_EN_O enabled whenever battery good
   7           *   - IO_PCTRL_I = 0 => IO_PWR_EN_O only enabled at night if battery good
   8           *  2. Control IO_NIGHT_O bit
   9           *   - Based on Charge state
  10           *  3. Control IO_PWR_EN_O bit (external power enable)
  11           *   - Goes low when power-off timer expires (after IO_ALERT_N_O asserted)
  12           *   - Goes high when voltage crosses PowerOn threshold if turned off for low-voltage case
  13           *     or when IO_NIGHT_O asserted if IO_PCTRL_I = 0
  14           *   - Timer prevents power from being re-enabled after a low-battery shutdown and the
  15           *     battery recovers some (with no load) without being charged
  16           *  4. Control IO_ALERT_N_O bit
  17           *   - Goes low when timer to disable IO_PWR_EN_O started
  18           *   - Goes high when IO_PWR_EN_O re-asserted (stays low while IO_PWR_EN_O de-asserted
  19           *     to prevent sneak power path to any attached device - via the attached IO pin)
  20           *  5. Power down sequence
  21           *   - Timer triggered if low voltage triggered or IO_NIGHT_O de-asserted if IO_PCTRL_I = 0
  22           *     - IO_ALERT_N_O driven low when timer started
  23           *  6. Watchdog functionality
  24           *   - Cycles power when watchdog enabled and times out
  25           *
  26           * Copyright (c) 2018-2019 danjuliodesigns, LLC.  All rights reserved.
  27           *
  28           * SolarMpptCharger is free software: you can redistribute it and/or modify it
  29           * under the terms of the GNU Lesser General Public License as published
  30           * by the Free Software Foundation, either version 3 of the License, or
  31           * (at your option) any later version.
  32           *
  33           * SolarMpptCharger is distributed in the hope that it will be useful,
  34           * but WITHOUT ANY WARRANTY; without even the implied warranty of
  35           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  36           * GNU Lesser General Public License for more details.
  37           *
  38           * See <http://www.gnu.org/licenses/>.
  39           *
  40           */
  41          #include "adc.h"
  42          #include "power.h"
  43          #include "charge.h"
  44          #include "config.h"
  45          #include "param.h"
  46          #include "smbus.h"
  47          
  48          //-----------------------------------------------------------------------------
  49          // External IO bits
  50          //-----------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 2   

  51          SI_SBIT(IO_ALERT_N_O, SFR_P1, 0);
  52          SI_SBIT(IO_NIGHT_O, SFR_P0, 7);
  53          SI_SBIT(IO_PCTRL_I, SFR_P1, 5);
  54          SI_SBIT(IO_PWR_EN_O, SFR_P0, 6);
  55          
  56          
  57          
  58          //-----------------------------------------------------------------------------
  59          // Variables
  60          //-----------------------------------------------------------------------------
  61          bool POWER_badBatt;
  62          bool POWER_enableAtNight;
  63          bool POWER_isNight;
  64          bool POWER_powerEnabled;
  65          bool POWER_watchdogGlobalEnable;
  66          bool POWER_watchdogCountWritten;
  67          bool POWER_watchdogTriggered;
  68          uint8_t POWER_state;
  69          uint16_t POWER_offCount;
  70          uint8_t POWER_watchdogCount;
  71          uint16_t POWER_watchdogPwrOffTO;
  72          
  73          
  74          
  75          //-----------------------------------------------------------------------------
  76          // Internal Routine forward declarations
  77          //-----------------------------------------------------------------------------
  78          void _POWER_DisableWatchdog();
  79          
  80          
  81          
  82          //-----------------------------------------------------------------------------
  83          // API Routines
  84          //-----------------------------------------------------------------------------
  85          void POWER_Init()
  86          {
  87   1              // Update state based on external information
  88   1              //   Use direct ADC Module values instead of CHARGE Module values because they
  89   1              //   haven't been updated yet.
  90   1              POWER_badBatt = (((uint16_t) ADC_GetValue(ADC_MEAS_VB_INDEX)) < V_BAD_BATTERY);
  91   1              POWER_enableAtNight = (IO_PCTRL_I == 0);
  92   1              POWER_isNight = (CHARGE_GetState() == CHG_ST_NIGHT);
  93   1      
  94   1              // Variable Init
  95   1              POWER_watchdogGlobalEnable = false;
  96   1              POWER_watchdogCountWritten = false;
  97   1              POWER_watchdogTriggered = false;
  98   1              POWER_offCount = 0;
  99   1              POWER_watchdogCount = 0;
 100   1              POWER_watchdogPwrOffTO = PWROFF_DEF_WD_TIMEOUT;
 101   1      
 102   1              // Initial power enable
 103   1              if (ADC_GetValue(ADC_MEAS_VB_INDEX) <= PARAM_GetPwrOffMv()) {
 104   2                      // Low Battery: Startup off
 105   2                      POWER_state = PWR_ST_OFF_LB;
 106   2                      POWER_offCount = PWROFF_LB_CHG_TIMEOUT;
 107   2                      POWER_powerEnabled = false;
 108   2              }
 109   1              else if (POWER_enableAtNight && !POWER_isNight) {
 110   2                      // Battery OK but not night when we are configured to enable at night
 111   2                      POWER_state = PWR_ST_OFF_DAY;
 112   2                      POWER_powerEnabled = false;
 113   2              }
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 3   

 114   1              else {
 115   2                      // Turn on
 116   2                      POWER_state = PWR_ST_ON;
 117   2                      POWER_powerEnabled = true;
 118   2              }
 119   1      
 120   1              // Output Init
 121   1              IO_NIGHT_O = POWER_isNight;
 122   1              IO_PWR_EN_O = POWER_powerEnabled ? 1 : 0;
 123   1              IO_ALERT_N_O = POWER_powerEnabled ? 1 : 0;
 124   1      }
 125          
 126          
 127          void POWER_Update()
 128          {
 129   1              bool watchdogTrigger = false;
 130   1              bool watchdogEnabled = POWER_WatchdogRunning();
 131   1      
 132   1              // Get external conditions
 133   1              POWER_badBatt = (CHARGE_GetVbMv() < V_BAD_BATTERY);
 134   1              POWER_enableAtNight = (IO_PCTRL_I == 0);
 135   1              POWER_isNight = (CHARGE_GetState() == CHG_ST_NIGHT);
 136   1      
 137   1              // Evaluate our state
 138   1              switch (POWER_state) {
 139   2              case PWR_ST_OFF_LB:
 140   2                      // Evaluate minimum charge timer (to help try prevent a "bounced" battery from restarting
 141   2                      // before it has had a change to charge some)
 142   2                      if (POWER_offCount != 0) {
 143   3                              if ((CHARGE_GetState() == CHG_ST_NIGHT) || (CHARGE_GetState() == CHG_ST_IDLE)) {
 144   4                                      // Hold counter while not charging
 145   4                                      POWER_offCount = PWROFF_LB_CHG_TIMEOUT;
 146   4                              } else {
 147   4                                      // Decrement charger while charging
 148   4                                      POWER_offCount--;
 149   4                              }
 150   3                      }
 151   2      
 152   2                      // Check for restart conditions
 153   2                      if ((CHARGE_GetVbMv() >= PARAM_GetPwrOnMv()) && (POWER_offCount == 0)) {
 154   3                              if (POWER_enableAtNight) {
 155   4                                      // Move to a state that can check if it's still day or not
 156   4                                      POWER_state = PWR_ST_OFF_DAY;
 157   4                              }
 158   3                              else {
 159   4                                      // Can restart immediately
 160   4                                      POWER_state = PWR_ST_ON;
 161   4                              }
 162   3                      }
 163   2                      break;
 164   2      
 165   2              case PWR_ST_OFF_DAY:
 166   2                      if (CHARGE_GetVbMv() <= PARAM_GetPwrOffMv()) {
 167   3                              // Move immediately to battery discharged off state
 168   3                              POWER_state = PWR_ST_OFF_LB;
 169   3                              POWER_offCount = PWROFF_LB_CHG_TIMEOUT;
 170   3                      }
 171   2                      else if ((CHARGE_GetVbMv() >= (PARAM_GetPwrOffMv() + PWR_LB_HYST_MV)) && POWER_isNight) {
 172   3                              // Battery is OK enough to turn on if we were off for day
 173   3                              POWER_state = PWR_ST_ON;
 174   3                      }
 175   2                      break;
 176   2      
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 4   

 177   2              case PWR_ST_ALERT_LB:
 178   2                      if (--POWER_offCount == 0) {
 179   3                              POWER_state = PWR_ST_OFF_LB;
 180   3                              POWER_offCount = PWROFF_LB_CHG_TIMEOUT;
 181   3                      }
 182   2                      break;
 183   2      
 184   2              case PWR_ST_ALERT_DAY:
 185   2                      if (--POWER_offCount == 0) {
 186   3                              POWER_state = PWR_ST_OFF_DAY;
 187   3                      }
 188   2                      break;
 189   2      
 190   2              case PWR_ST_ON:
 191   2                      // Evaluate the watchdog if it is running
 192   2                      watchdogTrigger = false;
 193   2                      if (watchdogEnabled) {
 194   3                              if (POWER_watchdogCount != 0) {
 195   4                                      if (--POWER_watchdogCount == 0) {
 196   5                                              watchdogTrigger = true;
 197   5                                              POWER_watchdogTriggered = true;
 198   5                                              SMB_SetStatusBit(SMB_ST_PWD_TRIG_MASK, true);
 199   5                                      }
 200   4                              }
 201   3                      }
 202   2      
 203   2                      // Start watchdog power reset if watchdog was triggered
 204   2                      if (watchdogEnabled && watchdogTrigger) {
 205   3                              POWER_state = PWR_ST_WD_ALERT;
 206   3                              POWER_offCount = PWROFF_WARN_TIMEOUT;
 207   3                      }
 208   2                      // Otherwise start to turn off if battery voltage too low for longer than LOWPWR_TIMEOUT
 209   2                      else if (CHARGE_GetVbMv() <= PARAM_GetPwrOffMv()) {
 210   3                              if (--POWER_offCount == 0) {
 211   4                                      POWER_state = PWR_ST_ALERT_LB;
 212   4                                      POWER_offCount = PWROFF_WARN_TIMEOUT;
 213   4                              }
 214   3                      }
 215   2                      // ...or if we're enabled for night operation and it isn't night
 216   2                      else if ((POWER_enableAtNight && !POWER_isNight)) {
 217   3                              POWER_state = PWR_ST_ALERT_DAY;
 218   3                              POWER_offCount = PWROFF_WARN_TIMEOUT;
 219   3                      } else {
 220   3                              // Hold low-battery shutdown trigger timer in reset
 221   3                              POWER_offCount = LOWPWR_TIMEOUT;
 222   3                      }
 223   2                      break;
 224   2      
 225   2              case PWR_ST_WD_ALERT:
 226   2                      if (watchdogEnabled) {
 227   3                              if (--POWER_offCount == 0) {
 228   4                                      POWER_state = PWR_ST_WD_OFF;
 229   4                                      POWER_offCount = POWER_watchdogPwrOffTO;
 230   4                              }
 231   3                      } else {
 232   3                              // Safety clause in case we got to this state incorrectly
 233   3                              POWER_state = PWR_ST_ON;
 234   3                      }
 235   2                      break;
 236   2      
 237   2              case PWR_ST_WD_OFF:
 238   2                      if (watchdogEnabled) {
 239   3                              if (--POWER_offCount == 0) {
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 5   

 240   4                                      POWER_state = PWR_ST_ON;
 241   4                                      _POWER_DisableWatchdog();               // Watchdog disabled on restart
 242   4                              }
 243   3                      } else {
 244   3                              // Safety clause in case we got to this state incorrectly
 245   3                              POWER_state = PWR_ST_ON;
 246   3                      }
 247   2                      break;
 248   2      
 249   2              default:
 250   2                      // Should never occur but turn on if we are above critical low battery
 251   2                      if (CHARGE_GetVbMv() > PARAM_GetPwrOffMv()) {
 252   3                              POWER_state = PWR_ST_ON;
 253   3                      } else {
 254   3                              POWER_state = PWR_ST_OFF_LB;
 255   3                              POWER_offCount = PWROFF_LB_CHG_TIMEOUT;
 256   3                      }
 257   2                      _POWER_DisableWatchdog();
 258   2              }
 259   1      
 260   1              // Update our outputs
 261   1              POWER_powerEnabled = ((POWER_state == PWR_ST_OFF_LB) ||
 262   1                                    (POWER_state == PWR_ST_OFF_DAY) ||
 263   1                                                    (POWER_state == PWR_ST_WD_OFF)) ? 0 : 1;
 264   1              IO_PWR_EN_O = POWER_powerEnabled;
 265   1              IO_ALERT_N_O = (POWER_state == PWR_ST_ON) ? 1 : 0;
 266   1              IO_NIGHT_O = POWER_isNight;
 267   1      
 268   1              // Update STATUS register
 269   1              SMB_SetStatusBit(SMB_ST_BAD_BATT_MASK, POWER_badBatt);
 270   1              SMB_SetStatusBit(SMB_ST_WD_RUN_MASK, watchdogEnabled);
 271   1              SMB_SetStatusBit(SMB_ST_PWR_EN_MASK, POWER_powerEnabled);
 272   1              SMB_SetStatusBit(SMB_ST_ALERT_MASK, POWER_IsAlert());
 273   1              SMB_SetStatusBit(SMB_ST_PCTRL_MASK, POWER_enableAtNight);
 274   1              SMB_SetStatusBit(SMB_ST_NIGHT_MASK, POWER_isNight);
 275   1      }
 276          
 277          
 278          void POWER_EnableWatchdog(bool en)
 279          {
 280   1              if (POWER_watchdogGlobalEnable) {
 281   2                      if (en == false) {
 282   3                              // Completely disable the watchdog
 283   3                              _POWER_DisableWatchdog();
 284   3                      }
 285   2              }
 286   1              POWER_watchdogGlobalEnable = en;
 287   1      }
 288          
 289          
 290          void POWER_SetWatchdogTimeout(uint8_t sec)
 291          {
 292   1              if (sec == 0) {
 293   2                      // Disable watchdog timer
 294   2                      POWER_watchdogCountWritten = false;
 295   2              } else {
 296   2                      // Enable timer
 297   2                      POWER_watchdogCountWritten = true;
 298   2              }
 299   1              POWER_watchdogCount = sec;
 300   1      }
 301          
 302          
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 6   

 303          void POWER_SetWatchdogPwrOffTO(uint16_t sec)
 304          {
 305   1              if (sec == 0) {
 306   2                      POWER_watchdogPwrOffTO = PWROFF_DEF_WD_TIMEOUT;
 307   2              } else {
 308   2                      POWER_watchdogPwrOffTO = sec;
 309   2              }
 310   1      }
 311          
 312          
 313          bool POWER_WatchdogRunning()
 314          {
 315   1              return (POWER_watchdogGlobalEnable && POWER_watchdogCountWritten);
 316   1      }
 317          
 318          
 319          
 320          //-----------------------------------------------------------------------------
 321          // Internal Routines
 322          //-----------------------------------------------------------------------------
 323          void _POWER_DisableWatchdog()
 324          {
 325   1              POWER_watchdogGlobalEnable = false;
 326   1              POWER_watchdogCountWritten = false;
 327   1              POWER_watchdogCount = 0;
 328   1              POWER_watchdogPwrOffTO = PWROFF_DEF_WD_TIMEOUT;
 329   1      }
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com005F (BEGIN)
0000         L?0096:
0000         L?0097:
0000 7800        R     MOV     R0,#LOW POWER_offCount
0002 08                INC     R0
0003 E2                MOVX    A,@R0
0004 24FF              ADD     A,#0FFH
0006 FF                MOV     R7,A
0007 F2                MOVX    @R0,A
0008 18                DEC     R0
0009 E2                MOVX    A,@R0
000A 34FF              ADDC    A,#0FFH
000C F2                MOVX    @R0,A
000D 4F                ORL     A,R7
000E 22                RET     
000F         L?0099:
000F E4                CLR     A
0010 7800        R     MOV     R0,#LOW POWER_state
0012         L?0100:
0012 F2                MOVX    @R0,A
0013 08                INC     R0
0014         L?0101:
0014 740E              MOV     A,#0EH
0016 F2                MOVX    @R0,A
0017 08                INC     R0
0018 7410              MOV     A,#010H
001A 22                RET     
001B         L?0102:
001B C3                CLR     C
001C         L?0103:
001C 7800        E     MOV     R0,#LOW v_b_mv+01H
001E E2                MOVX    A,@R0
001F 9F                SUBB    A,R7
0020 18                DEC     R0
0021 E2                MOVX    A,@R0
0022 9E                SUBB    A,R6
0023 22                RET     
0024         L?0104:
0024 7800        R     MOV     R0,#LOW POWER_watchdogCount
0026 F2                MOVX    @R0,A
0027 7800        R     MOV     R0,#LOW POWER_watchdogPwrOffTO
0029 F2                MOVX    @R0,A
002A 08                INC     R0
002B 740A              MOV     A,#0AH
002D F2                MOVX    @R0,A
002E 22                RET     
             ; FUNCTION Com005F (END)

             ; FUNCTION POWER_Init (BEGIN)
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 90
0000 7F02              MOV     R7,#02H
0002 120000      E     LCALL   _ADC_GetValue
0005 C3                CLR     C
0006 EF                MOV     A,R7
0007 9404              SUBB    A,#04H
0009 EE                MOV     A,R6
000A 9429              SUBB    A,#029H
000C 5002              JNC     ?C0001
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 8   

000E 8001              SJMP    ?C0002
0010         ?C0001:
0010 C3                CLR     C
0011         ?C0002:
0011 9200        R     MOV     POWER_badBatt,C
                                           ; SOURCE LINE # 91
0013 A295              MOV     C,IO_PCTRL_I
0015 4003              JC      ?C0003
0017 D3                SETB    C
0018 8001              SJMP    ?C0004
001A         ?C0003:
001A C3                CLR     C
001B         ?C0004:
001B 9200        R     MOV     POWER_enableAtNight,C
                                           ; SOURCE LINE # 92
001D 7800        E     MOV     R0,#LOW chargeState
001F E2                MOVX    A,@R0
0020 C3                CLR     C
0021 7001              JNZ     ?C0005
0023 D3                SETB    C
0024         ?C0005:
0024         ?C0006:
0024 9200        R     MOV     POWER_isNight,C
                                           ; SOURCE LINE # 95
0026 C200        R     CLR     POWER_watchdogGlobalEnable
                                           ; SOURCE LINE # 96
0028 C200        R     CLR     POWER_watchdogCountWritten
                                           ; SOURCE LINE # 97
002A C200        R     CLR     POWER_watchdogTriggered
                                           ; SOURCE LINE # 98
002C E4                CLR     A
002D 7800        R     MOV     R0,#LOW POWER_offCount
002F F2                MOVX    @R0,A
0030 08                INC     R0
0031 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
0032 120000      R     LCALL   L?0104
                                           ; SOURCE LINE # 103
0035 7F02              MOV     R7,#02H
0037 120000      E     LCALL   _ADC_GetValue
003A C006              PUSH    AR6
003C C007              PUSH    AR7
003E 120000      E     LCALL   PARAM_GetPwrOffMv
0041 D005              POP     AR5
0043 D004              POP     AR4
0045 D3                SETB    C
0046 ED                MOV     A,R5
0047 9F                SUBB    A,R7
0048 EC                MOV     A,R4
0049 9E                SUBB    A,R6
004A 5005              JNC     ?C0007
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
004C 120000      R     LCALL   L?0099
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
004F 800A              SJMP    ?C0086
0051         ?C0007:
                                           ; SOURCE LINE # 109
0051 30000C            JNB     POWER_enableAtNight,?C0009
0054 200009            JB      POWER_isNight,?C0009
                                           ; SOURCE LINE # 111
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 9   

0057 7800        R     MOV     R0,#LOW POWER_state
0059 7401              MOV     A,#01H
005B         ?C0086:
005B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 112
005C C200        R     CLR     POWER_powerEnabled
                                           ; SOURCE LINE # 113
005E 8007              SJMP    ?C0008
0060         ?C0009:
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 116
0060 7800        R     MOV     R0,#LOW POWER_state
0062 7404              MOV     A,#04H
0064 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 117
0065 D200        R     SETB    POWER_powerEnabled
                                           ; SOURCE LINE # 118
0067         ?C0008:
                                           ; SOURCE LINE # 121
0067 A200        R     MOV     C,POWER_isNight
0069 9287              MOV     IO_NIGHT_O,C
                                           ; SOURCE LINE # 122
006B C3                CLR     C
006C 300001            JNB     POWER_powerEnabled,?C0011
006F D3                SETB    C
0070         ?C0011:
0070         ?C0012:
0070 9286              MOV     IO_PWR_EN_O,C
                                           ; SOURCE LINE # 123
0072 C3                CLR     C
0073 300001            JNB     POWER_powerEnabled,?C0013
0076 D3                SETB    C
0077         ?C0013:
0077         ?C0014:
0077 9290              MOV     IO_ALERT_N_O,C
                                           ; SOURCE LINE # 124
0079 22                RET     
             ; FUNCTION POWER_Init (END)

             ; FUNCTION POWER_Update (BEGIN)
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0000 C200        R     CLR     watchdogTrigger
                                           ; SOURCE LINE # 130
0002 120000      R     LCALL   POWER_WatchdogRunning
0005 9200        R     MOV     watchdogEnabled,C
                                           ; SOURCE LINE # 133
0007 C3                CLR     C
0008 7800        E     MOV     R0,#LOW v_b_mv+01H
000A E2                MOVX    A,@R0
000B 9404              SUBB    A,#04H
000D 18                DEC     R0
000E E2                MOVX    A,@R0
000F 9429              SUBB    A,#029H
0011 5002              JNC     ?C0016
0013 8001              SJMP    ?C0017
0015         ?C0016:
0015 C3                CLR     C
0016         ?C0017:
0016 9200        R     MOV     POWER_badBatt,C
                                           ; SOURCE LINE # 134
0018 A295              MOV     C,IO_PCTRL_I
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 10  

001A 4003              JC      ?C0018
001C D3                SETB    C
001D 8001              SJMP    ?C0019
001F         ?C0018:
001F C3                CLR     C
0020         ?C0019:
0020 9200        R     MOV     POWER_enableAtNight,C
                                           ; SOURCE LINE # 135
0022 7800        E     MOV     R0,#LOW chargeState
0024 E2                MOVX    A,@R0
0025 FF                MOV     R7,A
0026 7E00              MOV     R6,#00H
0028 C3                CLR     C
0029 7001              JNZ     ?C0020
002B D3                SETB    C
002C         ?C0020:
002C         ?C0021:
002C 9200        R     MOV     POWER_isNight,C
                                           ; SOURCE LINE # 138
002E 7800        R     MOV     R0,#LOW POWER_state
0030 E2                MOVX    A,@R0
0031 B40700            CJNE    A,#07H,?C0082
0034         ?C0082:
0034 4003              JC      $ + 5H
0036 020000      R     LJMP    ?C0058
0039 900000      R     MOV     DPTR,#?C0083
003C F8                MOV     R0,A
003D 28                ADD     A,R0
003E 28                ADD     A,R0
003F 73                JMP     @A+DPTR
0040         ?C0083:
0040 020000      R     LJMP    ?C0023
0043 020000      R     LJMP    ?C0031
0046 020000      R     LJMP    ?C0035
0049 020000      R     LJMP    ?C0037
004C 020000      R     LJMP    ?C0039
004F 020000      R     LJMP    ?C0050
0052 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 139
0055         ?C0023:
                                           ; SOURCE LINE # 142
0055 7800        R     MOV     R0,#LOW POWER_offCount+01H
0057 E2                MOVX    A,@R0
0058 7002              JNZ     ?C0084
005A 18                DEC     R0
005B E2                MOVX    A,@R0
005C         ?C0084:
005C 601E              JZ      ?C0024
                                           ; SOURCE LINE # 143
005E EF                MOV     A,R7
005F 4E                ORL     A,R6
0060 6007              JZ      ?C0026
0062 7800        E     MOV     R0,#LOW chargeState
0064 E2                MOVX    A,@R0
0065 6401              XRL     A,#01H
0067 7008              JNZ     ?C0025
0069         ?C0026:
                                           ; SOURCE LINE # 145
0069 7800        R     MOV     R0,#LOW POWER_offCount
006B 120000      R     LCALL   L?0101
006E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 146
006F 800B              SJMP    ?C0024
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 11  

0071         ?C0025:
                                           ; SOURCE LINE # 148
0071 7800        R     MOV     R0,#LOW POWER_offCount+01H
0073 E2                MOVX    A,@R0
0074 24FF              ADD     A,#0FFH
0076 F2                MOVX    @R0,A
0077 18                DEC     R0
0078 E2                MOVX    A,@R0
0079 34FF              ADDC    A,#0FFH
007B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
007C         ?C0024:
                                           ; SOURCE LINE # 153
007C 120000      E     LCALL   PARAM_GetPwrOnMv
007F 120000      R     LCALL   L?0102
0082 5003              JNC     $ + 5H
0084 020000      R     LJMP    ?C0022
0087 7800        R     MOV     R0,#LOW POWER_offCount+01H
0089 E2                MOVX    A,@R0
008A 7002              JNZ     ?C0085
008C 18                DEC     R0
008D E2                MOVX    A,@R0
008E         ?C0085:
008E 6003              JZ      $ + 5H
0090 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 154
0093 7800        R     MOV     R0,#LOW POWER_state
0095 300029            JNB     POWER_enableAtNight,?C0087
                                           ; SOURCE LINE # 156
0098 04                INC     A
0099 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 157
009A 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 165
009D         ?C0031:
                                           ; SOURCE LINE # 166
009D 120000      R     LCALL   L?0098
00A0 5005              JNC     ?C0032
                                           ; SOURCE LINE # 168
00A2 E4                CLR     A
00A3 7800        R     MOV     R0,#LOW POWER_state
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
00A5 8026              SJMP    ?C0088
00A7         ?C0032:
                                           ; SOURCE LINE # 171
00A7 120000      E     LCALL   PARAM_GetPwrOffMv
00AA EF                MOV     A,R7
00AB 24FA              ADD     A,#0FAH
00AD FF                MOV     R7,A
00AE E4                CLR     A
00AF 3E                ADDC    A,R6
00B0 FE                MOV     R6,A
00B1 120000      R     LCALL   L?0102
00B4 5003              JNC     $ + 5H
00B6 020000      R     LJMP    ?C0022
00B9 200003      R     JB      POWER_isNight,$ + 6H
00BC 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 173
00BF 7800        R     MOV     R0,#LOW POWER_state
00C1         ?C0087:
                                           ; SOURCE LINE # 174
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 12  

                                           ; SOURCE LINE # 175
00C1 020000      R     LJMP    ?C0093
                                           ; SOURCE LINE # 177
00C4         ?C0035:
                                           ; SOURCE LINE # 178
00C4 120000      R     LCALL   L?0096
00C7 6003              JZ      $ + 5H
00C9 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 179
00CC 18                DEC     R0
00CD         ?C0088:
                                           ; SOURCE LINE # 180
00CD 120000      R     LCALL   L?0100
00D0 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
00D1 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 184
00D4         ?C0037:
                                           ; SOURCE LINE # 185
00D4 120000      R     LCALL   L?0096
00D7 6003              JZ      $ + 5H
00D9 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 186
00DC 18                DEC     R0
00DD 04                INC     A
00DE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
00DF 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 190
00E2         ?C0039:
                                           ; SOURCE LINE # 192
00E2 C200        R     CLR     watchdogTrigger
                                           ; SOURCE LINE # 193
00E4 300016            JNB     watchdogEnabled,?C0040
                                           ; SOURCE LINE # 194
00E7 7800        R     MOV     R0,#LOW POWER_watchdogCount
00E9 E2                MOVX    A,@R0
00EA 6011              JZ      ?C0040
                                           ; SOURCE LINE # 195
00EC E2                MOVX    A,@R0
00ED 14                DEC     A
00EE F2                MOVX    @R0,A
00EF 700C              JNZ     ?C0040
                                           ; SOURCE LINE # 196
00F1 D200        R     SETB    watchdogTrigger
                                           ; SOURCE LINE # 197
00F3 D200        R     SETB    POWER_watchdogTriggered
                                           ; SOURCE LINE # 198
00F5 D200        E     SETB    ?_SMB_SetStatusBit?BIT
00F7 FF                MOV     R7,A
00F8 7E40              MOV     R6,#040H
00FA 120000      E     LCALL   _SMB_SetStatusBit
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
00FD         ?C0040:
                                           ; SOURCE LINE # 204
00FD 300009            JNB     watchdogEnabled,?C0043
0100 300006            JNB     watchdogTrigger,?C0043
                                           ; SOURCE LINE # 205
0103 7800        R     MOV     R0,#LOW POWER_state
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 13  

0105 7405              MOV     A,#05H
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
0107 8019              SJMP    ?C0091
0109         ?C0043:
                                           ; SOURCE LINE # 209
0109 120000      R     LCALL   L?0098
010C 500A              JNC     ?C0045
                                           ; SOURCE LINE # 210
010E 120000      R     LCALL   L?0097
0111 7068              JNZ     ?C0022
                                           ; SOURCE LINE # 211
0113 18                DEC     R0
0114 7402              MOV     A,#02H
0116         ?C0090:
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0116 800A              SJMP    ?C0091
0118         ?C0045:
                                           ; SOURCE LINE # 216
0118 30000B            JNB     POWER_enableAtNight,?C0048
011B 200008            JB      POWER_isNight,?C0048
                                           ; SOURCE LINE # 217
011E 7800        R     MOV     R0,#LOW POWER_state
0120 7403              MOV     A,#03H
0122         ?C0091:
0122 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 218
0123 08                INC     R0
                                           ; SOURCE LINE # 219
0124 8002              SJMP    ?C0092
0126         ?C0048:
                                           ; SOURCE LINE # 221
0126 7800        R     MOV     R0,#LOW POWER_offCount
0128         ?C0092:
0128 E4                CLR     A
0129 F2                MOVX    @R0,A
012A 08                INC     R0
012B 743C              MOV     A,#03CH
012D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
012E 804B              SJMP    ?C0022
                                           ; SOURCE LINE # 225
0130         ?C0050:
                                           ; SOURCE LINE # 226
0130 300018            JNB     watchdogEnabled,?C0051
                                           ; SOURCE LINE # 227
0133 120000      R     LCALL   L?0097
0136 7043              JNZ     ?C0022
                                           ; SOURCE LINE # 228
0138 18                DEC     R0
0139 7406              MOV     A,#06H
013B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 229
013C 7800        R     MOV     R0,#LOW POWER_watchdogPwrOffTO
013E E2                MOVX    A,@R0
013F FF                MOV     R7,A
0140 08                INC     R0
0141 E2                MOVX    A,@R0
0142 7800        R     MOV     R0,#LOW POWER_offCount
0144 CF                XCH     A,R7
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 14  

0145 F2                MOVX    @R0,A
0146 08                INC     R0
0147 EF                MOV     A,R7
0148 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
0149 8030              SJMP    ?C0022
014B         ?C0051:
                                           ; SOURCE LINE # 233
014B 7800        R     MOV     R0,#LOW POWER_state
014D         ?C0089:
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
014D 8010              SJMP    ?C0093
                                           ; SOURCE LINE # 237
014F         ?C0054:
                                           ; SOURCE LINE # 238
014F 30000B            JNB     watchdogEnabled,?C0055
                                           ; SOURCE LINE # 239
0152 120000      R     LCALL   L?0097
0155 7024              JNZ     ?C0022
                                           ; SOURCE LINE # 240
0157 18                DEC     R0
0158 7404              MOV     A,#04H
015A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
015B 801B              SJMP    ?C0094
015D         ?C0055:
                                           ; SOURCE LINE # 245
015D 7800        R     MOV     R0,#LOW POWER_state
015F         ?C0093:
015F 7404              MOV     A,#04H
0161 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0162 8017              SJMP    ?C0022
                                           ; SOURCE LINE # 249
0164         ?C0058:
                                           ; SOURCE LINE # 251
0164 120000      E     LCALL   PARAM_GetPwrOffMv
0167 D3                SETB    C
0168 120000      R     LCALL   L?0103
016B 4007              JC      ?C0059
                                           ; SOURCE LINE # 252
016D 7800        R     MOV     R0,#LOW POWER_state
016F 7404              MOV     A,#04H
0171 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 253
0172 8004              SJMP    ?C0060
0174         ?C0059:
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0174 120000      R     LCALL   L?0099
0177 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 256
0178         ?C0060:
                                           ; SOURCE LINE # 257
0178         ?C0094:
0178 120000      R     LCALL   _POWER_DisableWatchdog
                                           ; SOURCE LINE # 258
017B         ?C0022:
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 15  

                                           ; SOURCE LINE # 261
017B 7800        R     MOV     R0,#LOW POWER_state
017D E2                MOVX    A,@R0
017E FF                MOV     R7,A
017F 7E00              MOV     R6,#00H
0181 6009              JZ      ?C0063
0183 6401              XRL     A,#01H
0185 6005              JZ      ?C0063
0187 EF                MOV     A,R7
0188 6406              XRL     A,#06H
018A 7003              JNZ     ?C0061
018C         ?C0063:
018C C3                CLR     C
018D 8001              SJMP    ?C0062
018F         ?C0061:
018F D3                SETB    C
0190         ?C0062:
0190 9200        R     MOV     POWER_powerEnabled,C
                                           ; SOURCE LINE # 264
0192 A200        R     MOV     C,POWER_powerEnabled
0194 9286              MOV     IO_PWR_EN_O,C
                                           ; SOURCE LINE # 265
0196 EF                MOV     A,R7
0197 6404              XRL     A,#04H
0199 4E                ORL     A,R6
019A C3                CLR     C
019B 7001              JNZ     ?C0064
019D D3                SETB    C
019E         ?C0064:
019E         ?C0065:
019E 9290              MOV     IO_ALERT_N_O,C
                                           ; SOURCE LINE # 266
01A0 A200        R     MOV     C,POWER_isNight
01A2 9287              MOV     IO_NIGHT_O,C
                                           ; SOURCE LINE # 269
01A4 A200        R     MOV     C,POWER_badBatt
01A6 9200        E     MOV     ?_SMB_SetStatusBit?BIT,C
01A8 7F00              MOV     R7,#00H
01AA 7E20              MOV     R6,#020H
01AC 120000      E     LCALL   _SMB_SetStatusBit
                                           ; SOURCE LINE # 270
01AF A200        R     MOV     C,watchdogEnabled
01B1 9200        E     MOV     ?_SMB_SetStatusBit?BIT,C
01B3 7F00              MOV     R7,#00H
01B5 7E01              MOV     R6,#01H
01B7 120000      E     LCALL   _SMB_SetStatusBit
                                           ; SOURCE LINE # 271
01BA A200        R     MOV     C,POWER_powerEnabled
01BC 9200        E     MOV     ?_SMB_SetStatusBit?BIT,C
01BE 7F80              MOV     R7,#080H
01C0 7E00              MOV     R6,#00H
01C2 120000      E     LCALL   _SMB_SetStatusBit
                                           ; SOURCE LINE # 272
01C5 7800        R     MOV     R0,#LOW POWER_state
01C7 E2                MOVX    A,@R0
01C8 6404              XRL     A,#04H
01CA C3                CLR     C
01CB 6001              JZ      ?C0066
01CD D3                SETB    C
01CE         ?C0066:
01CE         ?C0067:
01CE 9200        E     MOV     ?_SMB_SetStatusBit?BIT,C
01D0 7F40              MOV     R7,#040H
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 16  

01D2 7E00              MOV     R6,#00H
01D4 120000      E     LCALL   _SMB_SetStatusBit
                                           ; SOURCE LINE # 273
01D7 A200        R     MOV     C,POWER_enableAtNight
01D9 9200        E     MOV     ?_SMB_SetStatusBit?BIT,C
01DB 7F20              MOV     R7,#020H
01DD 7E00              MOV     R6,#00H
01DF 120000      E     LCALL   _SMB_SetStatusBit
                                           ; SOURCE LINE # 274
01E2 A200        R     MOV     C,POWER_isNight
01E4 9200        E     MOV     ?_SMB_SetStatusBit?BIT,C
01E6 7F08              MOV     R7,#08H
01E8 7E00              MOV     R6,#00H
01EA 020000      E     LJMP    _SMB_SetStatusBit
                                           ; SOURCE LINE # 275
01ED         L?0098:
01ED 120000      E     LCALL   PARAM_GetPwrOffMv
01F0 D3                SETB    C
01F1 7800        E     MOV     R0,#LOW v_b_mv+01H
01F3 E2                MOVX    A,@R0
01F4 9F                SUBB    A,R7
01F5 18                DEC     R0
01F6 E2                MOVX    A,@R0
01F7 9E                SUBB    A,R6
01F8 22                RET     
             ; FUNCTION POWER_Update (END)

             ; FUNCTION POWER_EnableWatchdog (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0000 300006            JNB     POWER_watchdogGlobalEnable,?C0069
                                           ; SOURCE LINE # 281
0003 200003            JB      en,?C0069
                                           ; SOURCE LINE # 283
0006 120000      R     LCALL   _POWER_DisableWatchdog
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0009         ?C0069:
                                           ; SOURCE LINE # 286
0009 A200        R     MOV     C,en
000B 9200        R     MOV     POWER_watchdogGlobalEnable,C
                                           ; SOURCE LINE # 287
000D 22                RET     
             ; FUNCTION POWER_EnableWatchdog (END)

             ; FUNCTION _POWER_SetWatchdogTimeout (BEGIN)
                                           ; SOURCE LINE # 290
;---- Variable 'sec' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0000 EF                MOV     A,R7
0001 7004              JNZ     ?C0072
                                           ; SOURCE LINE # 294
0003 C200        R     CLR     POWER_watchdogCountWritten
                                           ; SOURCE LINE # 295
0005 8002              SJMP    ?C0073
0007         ?C0072:
                                           ; SOURCE LINE # 297
0007 D200        R     SETB    POWER_watchdogCountWritten
                                           ; SOURCE LINE # 298
0009         ?C0073:
                                           ; SOURCE LINE # 299
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 17  

0009 7800        R     MOV     R0,#LOW POWER_watchdogCount
000B EF                MOV     A,R7
000C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 300
000D 22                RET     
             ; FUNCTION _POWER_SetWatchdogTimeout (END)

             ; FUNCTION _POWER_SetWatchdogPwrOffTO (BEGIN)
                                           ; SOURCE LINE # 303
;---- Variable 'sec' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0000 EF                MOV     A,R7
0001 4E                ORL     A,R6
0002 7800        R     MOV     R0,#LOW POWER_watchdogPwrOffTO
0004 7006              JNZ     ?C0075
                                           ; SOURCE LINE # 306
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 740A              MOV     A,#0AH
000A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 307
000B 22                RET     
000C         ?C0075:
                                           ; SOURCE LINE # 308
000C EE                MOV     A,R6
000D F2                MOVX    @R0,A
000E 08                INC     R0
000F EF                MOV     A,R7
0010 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0011         ?C0077:
0011 22                RET     
             ; FUNCTION _POWER_SetWatchdogPwrOffTO (END)

             ; FUNCTION POWER_WatchdogRunning (BEGIN)
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
0000 300005            JNB     POWER_watchdogGlobalEnable,?C0078
0003 300002            JNB     POWER_watchdogCountWritten,?C0078
0006 D3                SETB    C
0007 22                RET     
0008         ?C0078:
0008 C3                CLR     C
0009         ?C0079:
                                           ; SOURCE LINE # 316
0009 22                RET     
             ; FUNCTION POWER_WatchdogRunning (END)

             ; FUNCTION _POWER_DisableWatchdog (BEGIN)
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0000 C200        R     CLR     POWER_watchdogGlobalEnable
                                           ; SOURCE LINE # 326
0002 C200        R     CLR     POWER_watchdogCountWritten
                                           ; SOURCE LINE # 327
0004 E4                CLR     A
                                           ; SOURCE LINE # 328
0005 120000      R     LCALL   L?0104
                                           ; SOURCE LINE # 329
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 18  

0008 22                RET     
             ; FUNCTION _POWER_DisableWatchdog (END)

C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 19  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPI0CKR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
PSW_OV . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
XOSC0CN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SMB0CN0_MASTER . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
PCA0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F9H  2
RTC0KEY. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
POWER_Init . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SMB0CN0_ACK. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
EIE2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
PSCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
IT01CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
CS0CN0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
SMB0CN0_TXMODE . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
DERIVID. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
CS0MD1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
SFRPAGE. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
CS0MD2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
P0MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
CS0MD3 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
POWER_WatchdogRunning. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
ADC0CN0_ADINT. . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
TMR2RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
P2MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
POWER_enableAtNight. . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
TMR3RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
EIP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
EIP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
PARAM_GetPwrOffMv. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SCON0_RB8. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TMR2RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
PCA0CPH0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
TMR3RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
PCA0CPH1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
POWER_state. . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0000H  1
SCON0_TB8. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
CS0CN0_CSEN. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
B_B0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F0H  1
DP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0082H  2
PCA0CPH2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
B_B1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F1H  1
ADC0GT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C3H  2
IO_PWR_EN_O. . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
B_B2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F2H  1
PCA0CPL0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
B_B3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F3H  1
PCA0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
PCA0CPM0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
PCA0CPL1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
B_B4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F4H  1
PCA0CPM1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
PCA0CPL2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
B_B5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F5H  1
PCA0CPM2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
ADC0TK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
B_B6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F6H  1
ADC0LT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C5H  2
IREF0CN0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
_SMB_SetStatusBit. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SCON0_MCE. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
B_B7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F7H  1
XBR0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
SMB0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
XBR1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
CS0SCAN0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
SMB0CN0_STA. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
XBR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
CS0SCAN1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
ADC0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
ACC_ACC0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E0H  1
REF0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
HFO0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
CKCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
ACC_ACC1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E1H  1
REG0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
CRC0IN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
TMR2CN0_TR2. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
ACC_ACC2 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E2H  1
ACC_ACC3 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E3H  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
CMP0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
IO_NIGHT_O . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
ACC_ACC4 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E4H  1
PCA0CN0_CCF0 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ACC_ACC5 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E5H  1
POWER_badBatt. . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
PCA0CN0_CCF1 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
ACC_ACC6 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E6H  1
TMR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
PCA0CN0_CCF2 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
ACC_ACC7 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E7H  1
TMR3 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0094H  2
CS0CN0_CSCMPF. . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
IO_PCTRL_I . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
SMB0CN0_ACKRQ. . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
VDM0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
P0MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
SCON0_REN. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
P1MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
CS0THH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
SMB0CN0_STO. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
PMU0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
P0MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
bool . . . . . . . . . . . . . . . . .  TYPEDEF  DATA   BIT      -----  1
P1MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
CS0THL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
PSW_RS0. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PCA0CN0_CF . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
SPI0CN0_RXOVRN . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
PSW_RS1. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
PARAM_GetPwrOnMv . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TMR2CN0_T2XCLK0. . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
TMR2CN0_T2XCLK1. . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
ADC0CN0_ADEN . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
PMU0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
PMU0FL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
CRC0FLIP . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
PSW_PARITY . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
IE_ES0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
CMP0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009FH  1
IE_ET0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
POWER_offCount . . . . . . . . . . . .  PUBLIC   PDATA  U_INT    0001H  2
IE_ET1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
P0SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
IE_ET2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
P1SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
ADC0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
IE_EX0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
PCA0CN0_CR . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
IE_EX1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
_POWER_DisableWatchdog . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SCON0_SMODE. . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
CLKSEL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
_POWER_SetWatchdogTimeout. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  sec. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SPI0CN0_SPIEN. . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ADC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
POWER_watchdogPwrOffTO . . . . . . . .  PUBLIC   PDATA  U_INT    0003H  2
CRC0AUTO . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009EH  1
CS0CN0_CSBUSY. . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
ADC0CN0_ADBMEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
TMR2RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
ADC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
POWER_watchdogCountWritten . . . . . .  PUBLIC   DATA   BIT      0002H  1
TMR3RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0092H  2
PCA0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
PCA0CP0. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FBH  2
POWER_isNight. . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
PCA0CP1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E9H  2
_ADC_GetValue. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PCA0CP2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EBH  2
CRC0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
IP_PS0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
PCA0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
IP_PT0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
IP_PT1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
IO_ALERT_N_O . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
POWER_powerEnabled . . . . . . . . . .  PUBLIC   DATA   BIT      0004H  1
SMB0CN0_ARBLOST. . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
IP_PT2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
CS0CF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
_POWER_SetWatchdogPwrOffTO . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  sec. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
SPI0CN0_TXBMT. . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
PSW_F0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
IE_ESPI0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
PCA0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
SMB0CN0_SI . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
PSW_F1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
P0_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
IP_PX0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
POWER_watchdogCount. . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0005H  1
P1_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P0_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IP_PX1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
CS0DH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
CMP0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
TCON_IE0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
P1_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P0_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
TCON_IE1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
P1_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P0_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
SMB0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
POWER_Update . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  watchdogTrigger. . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  watchdogEnabled. . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P0_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
P1_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P0_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
CS0DL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
P1_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P0_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
P1_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P0_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
P1_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
P2_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
ADC0GTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
TMR2CN0_TF2H . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TMR2CN0_T2SPLIT. . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
PSW_AC . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
SPI0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
HFO0CAL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
CS0SE. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
TCON_TF0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
SCON0_RI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
TCON_TF1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
SBUF0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
IREF0CF. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
ADC0GTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
TMR2CN0_TF2L . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
SCON0_TI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
ADC0CN0_ADCM0. . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
ADC0LTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
TCON_IT0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
CS0CN0_CSPME . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
ADC0CN0_ADCM1. . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
P0MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
CRC0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
TCON_IT1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
ADC0CN0_ADCM2. . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
SCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
P1MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
CS0PM. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
ADC0CN0_ADWINT . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
ADC0CN0_ADBUSY . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SMB0ADM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
ADC0LTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
POWER_watchdogGlobalEnable . . . . . .  PUBLIC   DATA   BIT      0005H  1
SPI0CN0_MODF . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
IP_PSPI0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
CS0CN0_CSEOS . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
TMR2CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TMR3CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
POWER_watchdogTriggered. . . . . . . .  PUBLIC   DATA   BIT      0006H  1
SMB0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
TCON_TR0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
CS0CN0_CSINT . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
CS0MX. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
TMR2CN0_TF2CEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
TCON_TR1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
SMB0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
P0DRV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
CS0SS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
AUX. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
TMR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
SPI0CFG. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
P1DRV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
TMR3H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
P2DRV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
CRC0CNT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
POWER_EnableWatchdog . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  en . . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
chargeState. . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
TMR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
RTC0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
SPI0CN0_SPIF . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
TMR3L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
ADC0PWR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
IE_EA. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
RTC0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
CS0CN0_CSCMPEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
FLSCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
TMR2CN0_TF2LEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
SPI0CN0_WCOL . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
SPI0CN0_NSSMD0 . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
PSW_CY . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
SPI0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
SPI0CN0_NSSMD1 . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BDH  2
TOFFH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
PCA0PWM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
REVID. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
v_b_mv . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
TOFFL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
FLKEY. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADC0AC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    739    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   POWER                                                             02/10/2023 13:46:31 PAGE 25  

   PDATA SIZE       =      6    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
