C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SMBUS
OBJECT MODULE PLACED IN .\src/smbus.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.60\BIN\C51.
                    -exe /Users/danjulio/SimplicityStudio/v4_workspace/SolarMpptCharger/src/smbus.c OMF2 COMPACT DEBUG OBJECTEXTEND ROM(LARGE
                    -) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/danjulio/S
                    -implicityStudio/v4_workspace/SolarMpptCharger/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/80
                    -51/v4.1.7//Device/shared/si8051Base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.1.7//Dev
                    -ice/EFM8SB1/inc) REGFILE(SolarMpptCharger.ORC) PRINT(.\src/smbus.lst) COND SYMBOLS CODE PAGEWIDTH(120) PAGELENGTH(65) OB
                    -JECT(.\src/smbus.OBJ)

line level    source

   1          /*
   2           * smbus.c
   3           *
   4           * SMBus access module
   5           *  Implements an I2C-compatible interface at 7-bit address 0x12.  Main logic
   6           *  is interrupt driven by the SMBus peripheral with action taken based on
   7           *  current I2C access state.
   8           *
   9           * Copyright (c) 2018-2019 danjuliodesigns, LLC.  All rights reserved.
  10           *
  11           * SolarMpptCharger is free software: you can redistribute it and/or modify it
  12           * under the terms of the GNU Lesser General Public License as published
  13           * by the Free Software Foundation, either version 3 of the License, or
  14           * (at your option) any later version.
  15           *
  16           * SolarMpptCharger is distributed in the hope that it will be useful,
  17           * but WITHOUT ANY WARRANTY; without even the implied warranty of
  18           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  19           * GNU Lesser General Public License for more details.
  20           *
  21           * See <http://www.gnu.org/licenses/>.
  22           *
  23           */
  24          #include <SI_EFM8SB1_Register_Enums.h>
  25          #include "buck.h"
  26          #include "charge.h"
  27          #include "config.h"
  28          #include "param.h"
  29          #include "power.h"
  30          #include "smbus.h"
  31          #include "temp.h"
  32          #include "watchdog.h"
  33          
  34          
  35          //-----------------------------------------------------------------------------
  36          // Variables
  37          //-----------------------------------------------------------------------------
  38          volatile uint16_t smbRoArray[SMB_NUM_RO];
  39          
  40          
  41          
  42          //-----------------------------------------------------------------------------
  43          // Internal Routine forward declarations
  44          //-----------------------------------------------------------------------------
  45          uint16_t _SMB_GetInitStatus();
  46          uint8_t _SMB_ReadRegister(uint8_t reg);
  47          void _SMB_WriteRegister(uint8_t reg, uint16_t d);
  48          
  49          
  50          
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 2   

  51          //-----------------------------------------------------------------------------
  52          // API routines
  53          //-----------------------------------------------------------------------------
  54          void SMB_Init()
  55          {
  56   1              uint16_t* roPtr = &smbRoArray[0];
  57   1      
  58   1              // Initialize our RO array (optimized for code space - this has to change if the index list changes)
  59   1              *roPtr++ = (FW_ID << 12) | (FW_VER_MAJOR << 4) | FW_VER_MINOR;
  60   1              *roPtr++ = _SMB_GetInitStatus();
  61   1              *roPtr++ = 0;                       // PWM starts off
  62   1              *roPtr++ = CHARGE_GetVsMv();
  63   1              *roPtr++ = CHARGE_GetIsMa();
  64   1              *roPtr++ = CHARGE_GetVbMv();
  65   1              *roPtr++ = CHARGE_GetIbMa();
  66   1              *roPtr++ = (uint16_t) CHARGE_GetIcMa();
  67   1              *roPtr++ = TEMP_GetIntTempC10();
  68   1              *roPtr++ = TEMP_GetExtTempC10();
  69   1              *roPtr++ = CHARGE_GetMpptMv();
  70   1              *roPtr   = CHARGE_GetCompMv();
  71   1      }
  72          
  73          
  74          void SMB_SetIndexedValue(uint8_t index, uint16_t val)
  75          {
  76   1              SMBUS_DIS_INT();
  77   1              smbRoArray[index] = val;
  78   1              SMBUS_EN_INT();
  79   1      }
  80          
  81          
  82          // For atomic use by Buck code running in an ISR
  83          void SMB_SetBuckStatus(uint16_t val)
  84          {
  85   1              SMBUS_DIS_INT();
  86   1              smbRoArray[SMB_INDEX_BUCK] = val;
  87   1              SMBUS_EN_INT();
  88   1      }
  89          
  90          
  91          void SMB_SetStatusBit(uint16_t mask, bool val)
  92          {
  93   1              SMBUS_DIS_INT();
  94   1              smbRoArray[SMB_INDEX_STATUS] = smbRoArray[SMB_INDEX_STATUS] & ~mask;
  95   1              if (val) {
  96   2                      smbRoArray[SMB_INDEX_STATUS] |= mask;
  97   2              }
  98   1              SMBUS_EN_INT();
  99   1      }
 100          
 101          
 102          void SMB_SetStatusChargeState(uint8_t state)
 103          {
 104   1              SMBUS_DIS_INT();
 105   1              smbRoArray[SMB_INDEX_STATUS] = (smbRoArray[SMB_INDEX_STATUS] & ~SMB_ST_CHG_ST_MASK) |
 106   1                                             (state & SMB_ST_CHG_ST_MASK);
 107   1              SMBUS_EN_INT();
 108   1      }
 109          
 110          
 111          
 112          //-----------------------------------------------------------------------------
 113          // SMBUS0_ISR
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 3   

 114          //-----------------------------------------------------------------------------
 115          //  SMBUS0_IRQ requires ~1-5 uSec
 116          // IMPORTANT NOTE: This must be the highest priority interrupt to avoid the SMBUS hardware
 117          // from stretching the clock if another interrupt is running.  The Raspberry Pi SBC I2C
 118          // hardware has a bug that causes it to malfunction if the clock is stretched.  Even then
 119          // (because there is some delay in handling the ISR) the I2C clock should be set to 50 kHz.
 120          //   https://www.raspberrypi.org/forums/viewtopic.php?t=13771
 121          //
 122          SI_INTERRUPT (SMBUS0_ISR, SMBUS0_IRQn)
 123          {
 124   1              static bool first_byte;
 125   1              static uint8_t smb_reg;
 126   1              static uint16_t smb_data;
 127   1      
 128   1              if (SMB0CN0_ARBLOST == 0)
 129   1              {
 130   2                switch (SMB0CN0 & 0xF0)           // Decode the SMBus status vector
 131   2                {
 132   3                       // Slave Receiver: Start+Address received
 133   3                       case  SMB_SRADD:
 134   3                              SMB0CN0_STA = 0;                   // Clear SMB0CN0_STA bit
 135   3                              first_byte = true;
 136   3      
 137   3                              if((SMB0DAT&0x01) == SMB_READ) // If the transfer is a master READ,
 138   3                              {
 139   4                                      // Prepare outgoing byte
 140   4                                      SMB0DAT = _SMB_ReadRegister(smb_reg);
 141   4                                      smb_reg++;
 142   4                              }
 143   3                              break;
 144   3      
 145   3                       // Slave Receiver: Data received
 146   3                       case  SMB_SRDB:
 147   3      
 148   3                               if (first_byte) {
 149   4                                       // Set the register address
 150   4                                       first_byte = false;
 151   4                                       smb_reg = SMB0DAT;
 152   4                                       smb_data = 0;
 153   4                               } else {
 154   4                                       // Writing data
 155   4                                       smb_data = (smb_data << 8) | SMB0DAT;
 156   4                                       if (smb_reg & 0x01) {
 157   5                                               // Low half - time to write
 158   5                                               _SMB_WriteRegister(smb_reg, smb_data);
 159   5                                               smb_data = 0;
 160   5                                       }
 161   4                                       smb_reg++;
 162   4                               }
 163   3                               SMB0CN0_ACK = 1;                // SMB0CN0_ACK received data
 164   3                              break;
 165   3      
 166   3                       // Slave Receiver: Stop received while either a Slave Receiver or
 167   3                       // Slave Transmitter
 168   3                       case  SMB_SRSTO:
 169   3                               SMB0CN0_STO = 0;                // SMB0CN0_STO must be cleared by software when
 170   3                                                                                       // a STOP is detected as a slave
 171   3                               break;
 172   3      
 173   3                       // Slave Transmitter: Data byte transmitted
 174   3                       case  SMB_STDB:
 175   3                              if (SMB0CN0_ACK == 1)            // If Master SMB0CN0_ACK's, send the next byte
 176   3                              {
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 4   

 177   4                                      SMB0DAT = _SMB_ReadRegister(smb_reg);
 178   4                                      smb_reg++;
 179   4                              }                                // Otherwise, do nothing
 180   3                              break;
 181   3      
 182   3                       // Slave Transmitter: Arbitration lost, Stop detected
 183   3                       //
 184   3                       // This state will only be entered on a bus error condition.
 185   3                       // In normal operation, the slave is no longer sending data or has
 186   3                       // data pending when a STOP is received from the master, so the SMB0CN0_TXMODE
 187   3                       // bit is cleared and the slave goes to the SRSTO state.
 188   3                       case  SMB_STSTO:
 189   3                              SMB0CN0_STO = 0;                 // SMB0CN0_STO must be cleared by software when
 190   3                                                                                       // a STOP is detected as a slave
 191   3                              break;
 192   3      
 193   3                       // Default: all other cases undefined
 194   3                       default:
 195   3                              SMB0CF &= ~0x80;           // Reset communication
 196   3                              SMB0CF |= 0x80;
 197   3                              SMB0CN0_STA = 0;
 198   3                              SMB0CN0_STO = 0;
 199   3                              SMB0CN0_ACK = 1;
 200   3                              break;
 201   3                }
 202   2              }
 203   1              // SMB0CN0_ARBLOST = 1, Abort failed transfer
 204   1              else
 205   1              {
 206   2                SMB0CN0_STA = 0;
 207   2                SMB0CN0_STO = 0;
 208   2                SMB0CN0_ACK = 1;
 209   2              }
 210   1      
 211   1              SMB0CN0_SI = 0;                             // Clear SMBus interrupt flag
 212   1      }
 213          
 214          
 215          //-----------------------------------------------------------------------------
 216          // Internal Routines
 217          //-----------------------------------------------------------------------------
 218          uint16_t _SMB_GetInitStatus()
 219          {
 220   1              uint16_t s = 0;
 221   1      
 222   1              // OR in possibly set bits
 223   1              if (WD_WatchdogWasTriggered()) s |= SMB_ST_SWD_DET_MASK;
 224   1              if (POWER_WatchdogWasTriggered()) s |= SMB_ST_PWD_TRIG_MASK;
 225   1              if (POWER_badBattery()) s |= SMB_ST_BAD_BATT_MASK;
 226   1              if (TEMP_ExtSensorMissing()) s |= SMB_ST_ET_MISS_MASK;
 227   1              if (POWER_WatchdogRunning()) s |= SMB_ST_WD_RUN_MASK;
 228   1              if (POWER_IsEnabled()) s |= SMB_ST_PWR_EN_MASK;
 229   1              if (POWER_IsAlert()) s |= SMB_ST_ALERT_MASK;
 230   1              if (POWER_PctrlSet()) s |= SMB_ST_PCTRL_MASK;
 231   1              if (CHARGE_IsTempLimited()) s |= SMB_ST_T_LIM_MASK;
 232   1              if (POWER_IsNight()) s |= SMB_ST_NIGHT_MASK;
 233   1      
 234   1              // OR in charge status
 235   1              s |= (CHARGE_GetState() & SMB_ST_CHG_ST_MASK);
 236   1      
 237   1              return (s);
 238   1      }
 239          
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 5   

 240          
 241          uint8_t _SMB_ReadRegister(uint8_t reg)
 242          {
 243   1              bool high_half = (reg & 0x01) == 0;
 244   1              uint8_t index = reg >> 1;     // Index is for 16-bit accesses
 245   1              uint16_t d16;
 246   1      
 247   1              if (reg < SMB_PARAM_START) {
 248   2                      // RO register
 249   2                      d16 = smbRoArray[index];
 250   2      
 251   2                      // Special case for either watchdog detected bits in the STATUS register.  They
 252   2                      // must be cleared after the register was read.  We test their boolean detected
 253   2                      // flags before doing an address compare since it's faster.
 254   2                      if (POWER_WatchdogWasTriggered() || WD_WatchdogWasTriggered()) {
 255   3                              if (high_half && (index == SMB_INDEX_STATUS)) {
 256   4                                      POWER_ClearWatchdogTriggered();
 257   4                                      WD_ClearWatchdogTriggered();
 258   4                                      smbRoArray[SMB_INDEX_STATUS] &= ~(SMB_ST_PWD_TRIG_MASK | SMB_ST_SWD_DET_MASK);
 259   4                              }
 260   3                      }
 261   2              } else if (reg < SMB_WD_START) {
 262   2                      // PARAM
 263   2                      d16 = PARAM_GetIndexedValue(index - SMB_PARAM_START/2);
 264   2              } else if (reg == SMB_ADDR_WD_EN) {
 265   2                      // Watchdog enable register (appears in a low 16-bit location)
 266   2                      d16 = (POWER_WatchdogGlobalEnable()) ? 0x0001 : 0x0000;
 267   2              } else if (reg == SMB_ADDR_WD_TO) {
 268   2                      // Watchdog timeout register (appears in a low 16-bit location)
 269   2                      d16 = POWER_GetWatchdogTimeout();
 270   2              } else if (index == SMB_ADDR_WD_PWROFF/2) {
 271   2                      // Watchdog power off timeout register is a 16-bit register
 272   2                      d16 = POWER_GetWatchdogPwrOffTO();
 273   2              } else {
 274   2                      d16 = 0;
 275   2              }
 276   1      
 277   1              if (high_half) {
 278   2                      // Move high half down if necessary
 279   2                      d16 = d16 >> 8;
 280   2              }
 281   1      
 282   1              return (d16 & 0xFF);
 283   1      }
 284          
 285          
 286          void _SMB_WriteRegister(uint8_t reg, uint16_t d)
 287          {
 288   1              uint8_t index = reg >> 1;
 289   1      
 290   1              if ((reg >= SMB_PARAM_START) && (reg < SMB_WD_START)) {
 291   2                      // PARAM
 292   2                      PARAM_SetIndexedValue(index - SMB_PARAM_START/2, d);
 293   2              } else if (reg == SMB_ADDR_WD_EN) {
 294   2                      // Watchdog enable register
 295   2                      POWER_EnableWatchdog(d == SMB_WD_EN_MAGIC_BYTE);
 296   2              } else if (reg == SMB_ADDR_WD_TO) {
 297   2                      // Watchdog timeout register
 298   2                      POWER_SetWatchdogTimeout(d & 0xFF);
 299   2              } else if (index == SMB_ADDR_WD_PWROFF/2) {
 300   2                      // Watchdog power off timeout register is a 16-bit register so we key off of it's 16-bit address
 301   2                      POWER_SetWatchdogPwrOffTO(d);
 302   2              }
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 6   

 303   1      }
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0041 (BEGIN)
0000         L?0066:
0000         L?0067:
0000 E2                MOVX    A,@R0
0001 FE                MOV     R6,A
0002 08                INC     R0
0003 E2                MOVX    A,@R0
0004 FF                MOV     R7,A
0005         L?0068:
0005 7800        R     MOV     R0,#LOW roPtr
0007 E2                MOVX    A,@R0
0008 FB                MOV     R3,A
0009 08                INC     R0
000A 08                INC     R0
000B E2                MOVX    A,@R0
000C F9                MOV     R1,A
000D 2402              ADD     A,#02H
000F F2                MOVX    @R0,A
0010 18                DEC     R0
0011 E2                MOVX    A,@R0
0012 FA                MOV     R2,A
0013 3400              ADDC    A,#00H
0015 F2                MOVX    @R0,A
0016 EE                MOV     A,R6
0017 8FF0              MOV     B,R7
0019 020000      E     LJMP    ?C?ISTPTR
001C         L?0069:
001C E2                MOVX    A,@R0
001D FB                MOV     R3,A
001E 08                INC     R0
001F 08                INC     R0
0020 E2                MOVX    A,@R0
0021 F9                MOV     R1,A
0022 2402              ADD     A,#02H
0024 F2                MOVX    @R0,A
0025 18                DEC     R0
0026 E2                MOVX    A,@R0
0027 FA                MOV     R2,A
0028 3400              ADDC    A,#00H
002A F2                MOVX    @R0,A
002B 22                RET     
002C         L?0070:
002C         L?0071:
002C 7800        R     MOV     R0,#LOW s
002E E2                MOVX    A,@R0
002F F2                MOVX    @R0,A
0030 08                INC     R0
0031 E2                MOVX    A,@R0
0032 22                RET     
             ; FUNCTION Com0041 (END)

             ; FUNCTION SMB_Init (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 7800        R     MOV     R0,#LOW roPtr
0002 74FE              MOV     A,#0FEH
0004 F2                MOVX    @R0,A
0005 08                INC     R0
0006 7400        R     MOV     A,#HIGH smbRoArray
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 8   

0008 F2                MOVX    @R0,A
0009 08                INC     R0
000A 7400        R     MOV     A,#LOW smbRoArray
000C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 59
000D 7800        R     MOV     R0,#LOW roPtr
000F 120000      R     LCALL   L?0069
0012 7410              MOV     A,#010H
0014 75F020            MOV     B,#020H
0017 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 60
001A 120000      R     LCALL   _SMB_GetInitStatus
001D 120000      R     LCALL   L?0068
                                           ; SOURCE LINE # 61
0020 18                DEC     R0
0021 120000      R     LCALL   L?0069
0024 E4                CLR     A
0025 F5F0              MOV     B,A
0027 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 62
002A 7800        E     MOV     R0,#LOW v_s_mv
002C 120000      R     LCALL   L?0066
                                           ; SOURCE LINE # 63
002F 7800        E     MOV     R0,#LOW i_s_ma
0031 120000      R     LCALL   L?0066
                                           ; SOURCE LINE # 64
0034 7800        E     MOV     R0,#LOW v_b_mv
0036 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 65
0039 7800        E     MOV     R0,#LOW i_b_ma
003B 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 66
003E 7800        E     MOV     R0,#LOW i_c_ma
0040 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 67
0043 7800        E     MOV     R0,#LOW TEMP_IntTempC10
0045 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 68
0048 7800        E     MOV     R0,#LOW TEMP_ExtTempC10
004A 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 69
004D 7800        E     MOV     R0,#LOW chargeSolarRegMv
004F 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 70
0052 7800        E     MOV     R0,#LOW chargeCompThreshMv
0054 E2                MOVX    A,@R0
0055 F9                MOV     R1,A
0056 08                INC     R0
0057 E2                MOVX    A,@R0
0058 FF                MOV     R7,A
0059 7800        R     MOV     R0,#LOW roPtr
005B E2                MOVX    A,@R0
005C FB                MOV     R3,A
005D 08                INC     R0
005E E2                MOVX    A,@R0
005F FA                MOV     R2,A
0060 08                INC     R0
0061 E2                MOVX    A,@R0
0062 C9                XCH     A,R1
0063 8FF0              MOV     B,R7
0065 020000      E     LJMP    ?C?ISTPTR
             ; FUNCTION SMB_Init (END)

C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 9   

             ; FUNCTION _SMB_SetIndexedValue (BEGIN)
                                           ; SOURCE LINE # 74
;---- Variable 'val' assigned to Register 'R4/R5' ----
;---- Variable 'index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0000 53E6FE            ANL     EIE1,#0FEH
                                           ; SOURCE LINE # 77
0003 EF                MOV     A,R7
0004 25E0              ADD     A,ACC
0006 2400        R     ADD     A,#LOW smbRoArray
0008 F8                MOV     R0,A
0009 EC                MOV     A,R4
000A F2                MOVX    @R0,A
000B 08                INC     R0
000C ED                MOV     A,R5
000D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 78
000E 43E601            ORL     EIE1,#01H
                                           ; SOURCE LINE # 79
0011 22                RET     
             ; FUNCTION _SMB_SetIndexedValue (END)

             ; FUNCTION _SMB_SetBuckStatus (BEGIN)
                                           ; SOURCE LINE # 83
;---- Variable 'val' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0000 53E6FE            ANL     EIE1,#0FEH
                                           ; SOURCE LINE # 86
0003 7800        R     MOV     R0,#LOW smbRoArray+04H
0005 EE                MOV     A,R6
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 EF                MOV     A,R7
0009 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 87
000A 43E601            ORL     EIE1,#01H
                                           ; SOURCE LINE # 88
000D 22                RET     
             ; FUNCTION _SMB_SetBuckStatus (END)

             ; FUNCTION _SMB_SetStatusBit (BEGIN)
                                           ; SOURCE LINE # 91
;---- Variable 'mask' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0000 53E6FE            ANL     EIE1,#0FEH
                                           ; SOURCE LINE # 94
0003 EF                MOV     A,R7
0004 F4                CPL     A
0005 FD                MOV     R5,A
0006 EE                MOV     A,R6
0007 F4                CPL     A
0008 FC                MOV     R4,A
0009 7800        R     MOV     R0,#LOW smbRoArray+02H
000B E2                MOVX    A,@R0
000C 5C                ANL     A,R4
000D F2                MOVX    @R0,A
000E 08                INC     R0
000F E2                MOVX    A,@R0
0010 5D                ANL     A,R5
0011 F2                MOVX    @R0,A
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 10  

                                           ; SOURCE LINE # 95
0012 300008            JNB     val,?C0004
                                           ; SOURCE LINE # 96
0015 18                DEC     R0
0016 E2                MOVX    A,@R0
0017 4E                ORL     A,R6
0018 F2                MOVX    @R0,A
0019 08                INC     R0
001A E2                MOVX    A,@R0
001B 4F                ORL     A,R7
001C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 97
001D         ?C0004:
                                           ; SOURCE LINE # 98
001D 43E601            ORL     EIE1,#01H
                                           ; SOURCE LINE # 99
0020 22                RET     
             ; FUNCTION _SMB_SetStatusBit (END)

             ; FUNCTION _SMB_SetStatusChargeState (BEGIN)
                                           ; SOURCE LINE # 102
;---- Variable 'state' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0000 53E6FE            ANL     EIE1,#0FEH
                                           ; SOURCE LINE # 105
0003 EF                MOV     A,R7
0004 5407              ANL     A,#07H
0006 FF                MOV     R7,A
0007 7800        R     MOV     R0,#LOW smbRoArray+02H
0009 E2                MOVX    A,@R0
000A FC                MOV     R4,A
000B 08                INC     R0
000C E2                MOVX    A,@R0
000D 54F8              ANL     A,#0F8H
000F FD                MOV     R5,A
0010 EC                MOV     A,R4
0011 18                DEC     R0
0012 F2                MOVX    @R0,A
0013 ED                MOV     A,R5
0014 4F                ORL     A,R7
0015 08                INC     R0
0016 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 107
0017 43E601            ORL     EIE1,#01H
                                           ; SOURCE LINE # 108
001A 22                RET     
             ; FUNCTION _SMB_SetStatusChargeState (END)

             ; FUNCTION SMBUS0_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 11  

001B C007              PUSH    AR7
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 128
001D 30C203            JNB     SMB0CN0_ARBLOST,$ + 6H
0020 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0023 E5C0              MOV     A,SMB0CN0
0025 54F0              ANL     A,#0F0H
0027 601E              JZ      ?C0011
0029 24F0              ADD     A,#0F0H
002B 6054              JZ      ?C0015
002D 24D0              ADD     A,#0D0H
002F 6054              JZ      ?C0016
0031 24F0              ADD     A,#0F0H
0033 6063              JZ      ?C0018
0035 2430              ADD     A,#030H
0037 7063              JNZ     ?C0019
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 133
0039         ?C0009:
                                           ; SOURCE LINE # 134
0039 C2C5              CLR     SMB0CN0_STA
                                           ; SOURCE LINE # 135
003B D200        R     SETB    first_byte
                                           ; SOURCE LINE # 137
003D E5C2              MOV     A,SMB0DAT
003F 5401              ANL     A,#01H
0041 6401              XRL     A,#01H
0043 7065              JNZ     ?C0020
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0045 8041              SJMP    ?C0063
                                           ; SOURCE LINE # 146
0047         ?C0011:
                                           ; SOURCE LINE # 148
0047 30000E            JNB     first_byte,?C0012
                                           ; SOURCE LINE # 150
004A C200        R     CLR     first_byte
                                           ; SOURCE LINE # 151
004C 7800        R     MOV     R0,#LOW smb_reg
004E E5C2              MOV     A,SMB0DAT
0050 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 152
0051 08                INC     R0
0052 E4                CLR     A
0053 F2                MOVX    @R0,A
0054 08                INC     R0
0055 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 153
0056 8025              SJMP    ?C0013
0058         ?C0012:
                                           ; SOURCE LINE # 155
0058 7800        R     MOV     R0,#LOW smb_data+01H
005A E2                MOVX    A,@R0
005B ADC2              MOV     R5,SMB0DAT
005D 18                DEC     R0
005E F2                MOVX    @R0,A
005F ED                MOV     A,R5
0060 08                INC     R0
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 12  

0061 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 156
0062 7800        R     MOV     R0,#LOW smb_reg
0064 E2                MOVX    A,@R0
0065 FF                MOV     R7,A
0066 30E00F            JNB     ACC.0,?C0014
                                           ; SOURCE LINE # 158
0069 08                INC     R0
006A E2                MOVX    A,@R0
006B FC                MOV     R4,A
006C 08                INC     R0
006D E2                MOVX    A,@R0
006E FD                MOV     R5,A
006F 120000      R     LCALL   __SMB_WriteRegister
                                           ; SOURCE LINE # 159
0072 7800        R     MOV     R0,#LOW smb_data
0074 E4                CLR     A
0075 F2                MOVX    @R0,A
0076 08                INC     R0
0077 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 160
0078         ?C0014:
                                           ; SOURCE LINE # 161
0078 7800        R     MOV     R0,#LOW smb_reg
007A E2                MOVX    A,@R0
007B 04                INC     A
007C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 162
007D         ?C0013:
                                           ; SOURCE LINE # 163
007D D2C1              SETB    SMB0CN0_ACK
                                           ; SOURCE LINE # 164
007F 8029              SJMP    ?C0020
                                           ; SOURCE LINE # 168
0081         ?C0015:
                                           ; SOURCE LINE # 169
0081 C2C4              CLR     SMB0CN0_STO
                                           ; SOURCE LINE # 171
0083 8025              SJMP    ?C0020
                                           ; SOURCE LINE # 174
0085         ?C0016:
                                           ; SOURCE LINE # 175
0085 30C122            JNB     SMB0CN0_ACK,?C0020
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0088         ?C0063:
0088 7800        R     MOV     R0,#LOW smb_reg
008A E2                MOVX    A,@R0
008B FF                MOV     R7,A
008C 120000      R     LCALL   __SMB_ReadRegister
008F 8FC2              MOV     SMB0DAT,R7
                                           ; SOURCE LINE # 178
0091 7800        R     MOV     R0,#LOW smb_reg
0093 E2                MOVX    A,@R0
0094 04                INC     A
0095 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0096 8012              SJMP    ?C0020
                                           ; SOURCE LINE # 188
0098         ?C0018:
                                           ; SOURCE LINE # 189
0098 C2C4              CLR     SMB0CN0_STO
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 13  

                                           ; SOURCE LINE # 191
009A 800E              SJMP    ?C0020
                                           ; SOURCE LINE # 194
009C         ?C0019:
                                           ; SOURCE LINE # 195
009C 53C17F            ANL     SMB0CF,#07FH
                                           ; SOURCE LINE # 196
009F 43C180            ORL     SMB0CF,#080H
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
00A2 8000              SJMP    ?C0064
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
00A4         ?C0007:
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
00A4         ?C0064:
00A4 C2C5              CLR     SMB0CN0_STA
                                           ; SOURCE LINE # 207
00A6 C2C4              CLR     SMB0CN0_STO
                                           ; SOURCE LINE # 208
00A8 D2C1              SETB    SMB0CN0_ACK
                                           ; SOURCE LINE # 209
00AA         ?C0020:
                                           ; SOURCE LINE # 211
00AA C2C0              CLR     SMB0CN0_SI
                                           ; SOURCE LINE # 212
00AC D007              POP     AR7
00AE D006              POP     AR6
00B0 D005              POP     AR5
00B2 D004              POP     AR4
00B4 D003              POP     AR3
00B6 D002              POP     AR2
00B8 D001              POP     AR1
00BA D000              POP     AR0
00BC D0D0              POP     PSW
00BE D082              POP     DPL
00C0 D083              POP     DPH
00C2 D0F0              POP     B
00C4 D0E0              POP     ACC
00C6 32                RETI    
             ; FUNCTION SMBUS0_ISR (END)

             ; FUNCTION _SMB_GetInitStatus (BEGIN)
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW s
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 223
0006 300008            JNB     WD_Detected,?C0022
0009 18                DEC     R0
000A E2                MOVX    A,@R0
000B 4480              ORL     A,#080H
000D F2                MOVX    @R0,A
000E 08                INC     R0
000F E2                MOVX    A,@R0
0010 F2                MOVX    @R0,A
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 14  

0011         ?C0022:
                                           ; SOURCE LINE # 224
0011 300009            JNB     POWER_watchdogTriggered,?C0023
0014 7800        R     MOV     R0,#LOW s
0016 E2                MOVX    A,@R0
0017 4440              ORL     A,#040H
0019 F2                MOVX    @R0,A
001A 08                INC     R0
001B E2                MOVX    A,@R0
001C F2                MOVX    @R0,A
001D         ?C0023:
                                           ; SOURCE LINE # 225
001D 300009            JNB     POWER_badBatt,?C0024
0020 7800        R     MOV     R0,#LOW s
0022 E2                MOVX    A,@R0
0023 4420              ORL     A,#020H
0025 F2                MOVX    @R0,A
0026 08                INC     R0
0027 E2                MOVX    A,@R0
0028 F2                MOVX    @R0,A
0029         ?C0024:
                                           ; SOURCE LINE # 226
0029 300009            JNB     TEMP_extIsMissing,?C0025
002C 7800        R     MOV     R0,#LOW s
002E E2                MOVX    A,@R0
002F 4410              ORL     A,#010H
0031 F2                MOVX    @R0,A
0032 08                INC     R0
0033 E2                MOVX    A,@R0
0034 F2                MOVX    @R0,A
0035         ?C0025:
                                           ; SOURCE LINE # 227
0035 120000      E     LCALL   POWER_WatchdogRunning
0038 5009              JNC     ?C0026
003A 7800        R     MOV     R0,#LOW s
003C E2                MOVX    A,@R0
003D 4401              ORL     A,#01H
003F F2                MOVX    @R0,A
0040 08                INC     R0
0041 E2                MOVX    A,@R0
0042 F2                MOVX    @R0,A
0043         ?C0026:
                                           ; SOURCE LINE # 228
0043 300006            JNB     POWER_powerEnabled,?C0027
0046 120000      R     LCALL   L?0070
0049 4480              ORL     A,#080H
004B F2                MOVX    @R0,A
004C         ?C0027:
                                           ; SOURCE LINE # 229
004C 7800        E     MOV     R0,#LOW POWER_state
004E E2                MOVX    A,@R0
004F 6404              XRL     A,#04H
0051 6006              JZ      ?C0028
0053 120000      R     LCALL   L?0070
0056 4440              ORL     A,#040H
0058 F2                MOVX    @R0,A
0059         ?C0028:
                                           ; SOURCE LINE # 230
0059 300006            JNB     POWER_enableAtNight,?C0029
005C 120000      R     LCALL   L?0071
005F 4420              ORL     A,#020H
0061 F2                MOVX    @R0,A
0062         ?C0029:
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 15  

                                           ; SOURCE LINE # 231
0062 300006            JNB     chargeTempLimited,?C0030
0065 120000      R     LCALL   L?0071
0068 4410              ORL     A,#010H
006A F2                MOVX    @R0,A
006B         ?C0030:
                                           ; SOURCE LINE # 232
006B 300006            JNB     POWER_isNight,?C0031
006E 120000      R     LCALL   L?0071
0071 4408              ORL     A,#08H
0073 F2                MOVX    @R0,A
0074         ?C0031:
                                           ; SOURCE LINE # 235
0074 7800        E     MOV     R0,#LOW chargeState
0076 E2                MOVX    A,@R0
0077 5407              ANL     A,#07H
0079 FF                MOV     R7,A
007A 7800        R     MOV     R0,#LOW s
007C E2                MOVX    A,@R0
007D FE                MOV     R6,A
007E 08                INC     R0
007F E2                MOVX    A,@R0
0080 4F                ORL     A,R7
0081 FF                MOV     R7,A
0082 18                DEC     R0
0083 EE                MOV     A,R6
0084 F2                MOVX    @R0,A
0085 FE                MOV     R6,A
0086 08                INC     R0
0087 EF                MOV     A,R7
0088 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0089 22                RET     
             ; FUNCTION _SMB_GetInitStatus (END)

             ; FUNCTION __SMB_ReadRegister (BEGIN)
                                           ; SOURCE LINE # 241
;---- Variable 'd16' assigned to Register 'R4/R5' ----
0000 7800        R     MOV     R0,#LOW reg
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
0004 5401              ANL     A,#01H
0006 C3                CLR     C
0007 7001              JNZ     ?C0033
0009 D3                SETB    C
000A         ?C0033:
000A         ?C0034:
000A 9200        R     MOV     high_half,C
                                           ; SOURCE LINE # 244
000C 7800        R     MOV     R0,#LOW reg
000E E2                MOVX    A,@R0
000F FF                MOV     R7,A
0010 C3                CLR     C
0011 13                RRC     A
0012 08                INC     R0
0013 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 247
0014 C3                CLR     C
0015 EF                MOV     A,R7
0016 9418              SUBB    A,#018H
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 16  

0018 7480              MOV     A,#080H
001A 9480              SUBB    A,#080H
001C 5026              JNC     ?C0035
                                           ; SOURCE LINE # 249
001E E2                MOVX    A,@R0
001F FF                MOV     R7,A
0020 25E0              ADD     A,ACC
0022 2400        R     ADD     A,#LOW smbRoArray
0024 F8                MOV     R0,A
0025 E2                MOVX    A,@R0
0026 FC                MOV     R4,A
0027 08                INC     R0
0028 E2                MOVX    A,@R0
0029 FD                MOV     R5,A
                                           ; SOURCE LINE # 254
002A 200003            JB      POWER_watchdogTriggered,?C0037
002D 30006B            JNB     WD_Detected,?C0039
0030         ?C0037:
                                           ; SOURCE LINE # 255
0030 300068            JNB     high_half,?C0039
0033 EF                MOV     A,R7
0034 6401              XRL     A,#01H
0036 7063              JNZ     ?C0039
                                           ; SOURCE LINE # 256
0038 C200        E     CLR     POWER_watchdogTriggered
                                           ; SOURCE LINE # 257
003A C200        E     CLR     WD_Detected
                                           ; SOURCE LINE # 258
003C 7800        R     MOV     R0,#LOW smbRoArray+02H
003E E2                MOVX    A,@R0
003F 543F              ANL     A,#03FH
0041 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0042 8057              SJMP    ?C0039
0044         ?C0035:
0044 7800        R     MOV     R0,#LOW reg
0046 E2                MOVX    A,@R0
0047 C3                CLR     C
0048 9420              SUBB    A,#020H
004A 7480              MOV     A,#080H
004C 9480              SUBB    A,#080H
004E 500E              JNC     ?C0040
                                           ; SOURCE LINE # 263
0050 08                INC     R0
0051 E2                MOVX    A,@R0
0052 24F4              ADD     A,#0F4H
0054 FF                MOV     R7,A
0055 120000      E     LCALL   _PARAM_GetIndexedValue
0058 AC06              MOV     R4,AR6
005A AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 264
005C 803D              SJMP    ?C0039
005E         ?C0040:
005E 7800        R     MOV     R0,#LOW reg
0060 E2                MOVX    A,@R0
0061 FF                MOV     R7,A
0062 7E00              MOV     R6,#00H
0064 6421              XRL     A,#021H
0066 7012              JNZ     ?C0042
                                           ; SOURCE LINE # 266
0068 300005            JNB     POWER_watchdogGlobalEnable,?C0043
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 17  

006B FA                MOV     R2,A
006C 7B01              MOV     R3,#01H
006E 8004              SJMP    ?C0044
0070         ?C0043:
0070 7A00              MOV     R2,#00H
0072 7B00              MOV     R3,#00H
0074         ?C0044:
0074 AC02              MOV     R4,AR2
0076 AD03              MOV     R5,AR3
                                           ; SOURCE LINE # 267
0078 8021              SJMP    ?C0039
007A         ?C0042:
007A EF                MOV     A,R7
007B 6423              XRL     A,#023H
007D 4E                ORL     A,R6
007E 7008              JNZ     ?C0046
                                           ; SOURCE LINE # 269
0080 7800        E     MOV     R0,#LOW POWER_watchdogCount
0082 E2                MOVX    A,@R0
0083 7C00              MOV     R4,#00H
0085 FD                MOV     R5,A
                                           ; SOURCE LINE # 270
0086 8013              SJMP    ?C0039
0088         ?C0046:
0088 7800        R     MOV     R0,#LOW index
008A E2                MOVX    A,@R0
008B 6412              XRL     A,#012H
008D 7009              JNZ     ?C0048
                                           ; SOURCE LINE # 272
008F 7800        E     MOV     R0,#LOW POWER_watchdogPwrOffTO
0091 E2                MOVX    A,@R0
0092 FC                MOV     R4,A
0093 08                INC     R0
0094 E2                MOVX    A,@R0
0095 FD                MOV     R5,A
                                           ; SOURCE LINE # 273
0096 8003              SJMP    ?C0039
0098         ?C0048:
                                           ; SOURCE LINE # 274
0098 E4                CLR     A
0099 FC                MOV     R4,A
009A FD                MOV     R5,A
                                           ; SOURCE LINE # 275
009B         ?C0039:
                                           ; SOURCE LINE # 277
009B 300002            JNB     high_half,?C0050
                                           ; SOURCE LINE # 279
009E EC                MOV     A,R4
009F FD                MOV     R5,A
                                           ; SOURCE LINE # 280
00A0         ?C0050:
                                           ; SOURCE LINE # 282
00A0 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 283
00A2 22                RET     
             ; FUNCTION __SMB_ReadRegister (END)

             ; FUNCTION __SMB_WriteRegister (BEGIN)
                                           ; SOURCE LINE # 286
0000 7800        R     MOV     R0,#LOW reg
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
0004 08                INC     R0
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 18  

0005 EC                MOV     A,R4
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 ED                MOV     A,R5
0009 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
000A 7800        R     MOV     R0,#LOW reg
000C E2                MOVX    A,@R0
000D FF                MOV     R7,A
000E C3                CLR     C
000F 13                RRC     A
0010 7800        R     MOV     R0,#LOW index
0012 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 290
0013 7E00              MOV     R6,#00H
0015 C3                CLR     C
0016 EF                MOV     A,R7
0017 9418              SUBB    A,#018H
0019 7480              MOV     A,#080H
001B 9480              SUBB    A,#080H
001D 4017              JC      ?C0052
001F EF                MOV     A,R7
0020 9420              SUBB    A,#020H
0022 7480              MOV     A,#080H
0024 9480              SUBB    A,#080H
0026 500E              JNC     ?C0052
                                           ; SOURCE LINE # 292
0028 E2                MOVX    A,@R0
0029 24F4              ADD     A,#0F4H
002B FF                MOV     R7,A
002C 7800        R     MOV     R0,#LOW d
002E E2                MOVX    A,@R0
002F FC                MOV     R4,A
0030 08                INC     R0
0031 E2                MOVX    A,@R0
0032 FD                MOV     R5,A
0033 020000      E     LJMP    _PARAM_SetIndexedValue
                                           ; SOURCE LINE # 293
0036         ?C0052:
0036 7800        R     MOV     R0,#LOW reg
0038 E2                MOVX    A,@R0
0039 6421              XRL     A,#021H
003B 7012              JNZ     ?C0054
                                           ; SOURCE LINE # 295
003D 7800        R     MOV     R0,#LOW d+01H
003F E2                MOVX    A,@R0
0040 64EA              XRL     A,#0EAH
0042 7002              JNZ     ?C0062
0044 18                DEC     R0
0045 E2                MOVX    A,@R0
0046         ?C0062:
0046 C3                CLR     C
0047 7001              JNZ     ?C0055
0049 D3                SETB    C
004A         ?C0055:
004A         ?C0056:
004A 9200        E     MOV     ?POWER_EnableWatchdog?BIT,C
004C 020000      E     LJMP    POWER_EnableWatchdog
                                           ; SOURCE LINE # 296
004F         ?C0054:
004F 7800        R     MOV     R0,#LOW reg
0051 E2                MOVX    A,@R0
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 19  

0052 6423              XRL     A,#023H
0054 7007              JNZ     ?C0058
                                           ; SOURCE LINE # 298
0056 08                INC     R0
0057 08                INC     R0
0058 E2                MOVX    A,@R0
0059 FF                MOV     R7,A
005A 020000      E     LJMP    _POWER_SetWatchdogTimeout
                                           ; SOURCE LINE # 299
005D         ?C0058:
005D 7800        R     MOV     R0,#LOW index
005F E2                MOVX    A,@R0
0060 6412              XRL     A,#012H
0062 700A              JNZ     ?C0061
                                           ; SOURCE LINE # 301
0064 7800        R     MOV     R0,#LOW d
0066 E2                MOVX    A,@R0
0067 FE                MOV     R6,A
0068 08                INC     R0
0069 E2                MOVX    A,@R0
006A FF                MOV     R7,A
006B 120000      E     LCALL   _POWER_SetWatchdogPwrOffTO
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
006E         ?C0061:
006E 22                RET     
             ; FUNCTION __SMB_WriteRegister (END)

C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPI0CKR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
PSW_OV . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
XOSC0CN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
_SMB_SetBuckStatus . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
TEMP_IntTempC10. . . . . . . . . . . .  EXTERN   PDATA  INT      -----  2
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
SMB0CN0_MASTER . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
PCA0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F9H  2
RTC0KEY. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
SMB0CN0_ACK. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
EIE2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
TEMP_extIsMissing. . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
PSCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
smbRoArray . . . . . . . . . . . . . .  PUBLIC   PDATA  ARRAY    0003H  24
TEMP_ExtTempC10. . . . . . . . . . . .  EXTERN   PDATA  INT      -----  2
IT01CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
CS0CN0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
SMB0CN0_TXMODE . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
DERIVID. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
CS0MD1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
SFRPAGE. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
CS0MD2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
SMBUS0_ISR . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  first_byte . . . . . . . . . . . . .  STATIC   DATA   BIT      0000H  1
  smb_reg. . . . . . . . . . . . . . .  STATIC   PDATA  U_CHAR   0000H  1
  smb_data . . . . . . . . . . . . . .  STATIC   PDATA  U_INT    0001H  2
P0MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
CS0MD3 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
POWER_WatchdogRunning. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
v_s_mv . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
ADC0CN0_ADINT. . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
TMR2RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
P2MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
POWER_enableAtNight. . . . . . . . . .  EXTERN   DATA   BIT      -----  1
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TMR3RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
EIP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
EIP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
SCON0_RB8. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TMR2RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
PCA0CPH0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
TMR3RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
PCA0CPH1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
POWER_state. . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
SCON0_TB8. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
CS0CN0_CSEN. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
B_B0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F0H  1
DP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0082H  2
PCA0CPH2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
B_B1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F1H  1
ADC0GT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C3H  2
B_B2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F2H  1
PCA0CPL0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
B_B3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F3H  1
PCA0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
PCA0CPM0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
PCA0CPL1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
B_B4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F4H  1
PCA0CPM1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
PCA0CPL2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
B_B5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F5H  1
PCA0CPM2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
ADC0TK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
B_B6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F6H  1
ADC0LT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C5H  2
IREF0CN0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
_SMB_SetStatusBit. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mask . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  val. . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
SCON0_MCE. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
B_B7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F7H  1
XBR0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
SMB0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
XBR1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
CS0SCAN0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
SMB0CN0_STA. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
XBR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
CS0SCAN1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
ADC0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
ACC_ACC0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E0H  1
REF0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
HFO0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
CKCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
ACC_ACC1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E1H  1
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


REG0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
CRC0IN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
TMR2CN0_TR2. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
ACC_ACC2 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E2H  1
WD_Detected. . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
ACC_ACC3 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E3H  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
CMP0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
ACC_ACC4 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E4H  1
PCA0CN0_CCF0 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
ACC_ACC5 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E5H  1
POWER_badBatt. . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
PCA0CN0_CCF1 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
ACC_ACC6 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E6H  1
TMR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
PCA0CN0_CCF2 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
ACC_ACC7 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E7H  1
TMR3 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0094H  2
CS0CN0_CSCMPF. . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
SMB0CN0_ACKRQ. . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
VDM0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
P0MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
SCON0_REN. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
P1MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
CS0THH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
SMB0CN0_STO. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
PMU0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
P0MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
bool . . . . . . . . . . . . . . . . .  TYPEDEF  DATA   BIT      -----  1
P1MASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
CS0THL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
PSW_RS0. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PCA0CN0_CF . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
SPI0CN0_RXOVRN . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
PSW_RS1. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TMR2CN0_T2XCLK0. . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
TMR2CN0_T2XCLK1. . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
ADC0CN0_ADEN . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
PMU0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
PMU0FL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
CRC0FLIP . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
chargeCompThreshMv . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
PSW_PARITY . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
IE_ES0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
CMP0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009FH  1
_SMB_SetIndexedValue . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
IE_ET0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
IE_ET1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
P0SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
IE_ET2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
P1SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ADC0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
_PARAM_GetIndexedValue . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IE_EX0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
PCA0CN0_CR . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
IE_EX1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
SCON0_SMODE. . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
CLKSEL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
_POWER_SetWatchdogTimeout. . . . . . .  EXTERN   CODE   PROC     -----  -----
SPI0CN0_SPIEN. . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
ADC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
POWER_watchdogPwrOffTO . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
CRC0AUTO . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009EH  1
CS0CN0_CSBUSY. . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
ADC0CN0_ADBMEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
TMR2RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
ADC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
TMR3RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0092H  2
PCA0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
_PARAM_SetIndexedValue . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PCA0CP0. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FBH  2
POWER_isNight. . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
PCA0CP1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E9H  2
PCA0CP2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EBH  2
CRC0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
_SMB_SetStatusChargeState. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  state. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
IP_PS0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
PCA0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
IP_PT0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
IP_PT1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
POWER_powerEnabled . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
SMB0CN0_ARBLOST. . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
IP_PT2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
CS0CF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
_POWER_SetWatchdogPwrOffTO . . . . . .  EXTERN   CODE   PROC     -----  -----
SPI0CN0_TXBMT. . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
PSW_F0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
IE_ESPI0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
PCA0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
SMB0CN0_SI . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
PSW_F1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
P0_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
IP_PX0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
POWER_watchdogCount. . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
P1_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P0_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IP_PX1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
CS0DH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
CMP0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
chargeTempLimited. . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TCON_IE0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
P1_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P0_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
TCON_IE1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
P1_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P0_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
SMB0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
P1_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P0_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
chargeSolarRegMv . . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
P1_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P0_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
CS0DL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
P1_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P0_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
SMB_Init . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  roPtr. . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
P1_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P0_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
i_b_ma . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
P1_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
i_c_ma . . . . . . . . . . . . . . . .  EXTERN   PDATA  INT      -----  2
P2_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
ADC0GTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
TMR2CN0_TF2H . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TMR2CN0_T2SPLIT. . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
PSW_AC . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
SPI0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
HFO0CAL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
CS0SE. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
TCON_TF0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
SCON0_RI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
TCON_TF1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
SBUF0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
IREF0CF. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
ADC0GTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
TMR2CN0_TF2L . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
SCON0_TI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
ADC0CN0_ADCM0. . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
ADC0LTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
TCON_IT0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
CS0CN0_CSPME . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
ADC0CN0_ADCM1. . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
P0MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
CRC0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 25  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
_SMB_GetInitStatus . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
TCON_IT1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
ADC0CN0_ADCM2. . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
SCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
P1MAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
CS0PM. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
ADC0CN0_ADWINT . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
ADC0CN0_ADBUSY . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
SMB0ADM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
ADC0LTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
POWER_watchdogGlobalEnable . . . . . .  EXTERN   DATA   BIT      -----  1
SPI0CN0_MODF . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
IP_PSPI0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
CS0CN0_CSEOS . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
TMR2CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TMR3CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
POWER_watchdogTriggered. . . . . . . .  EXTERN   DATA   BIT      -----  1
i_s_ma . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
SMB0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
__SMB_ReadRegister . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  reg. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  high_half. . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  d16. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
TCON_TR0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
CS0CN0_CSINT . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
CS0MX. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
TMR2CN0_TF2CEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
TCON_TR1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
SMB0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
P0DRV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
CS0SS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
AUX. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
TMR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
SPI0CFG. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
P1DRV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
TMR3H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
P2DRV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
CRC0CNT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
POWER_EnableWatchdog . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
chargeState. . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
TMR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
RTC0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
SPI0CN0_SPIF . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
TMR3L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
ADC0PWR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
IE_EA. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
RTC0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
CS0CN0_CSCMPEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
FLSCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
TMR2CN0_TF2LEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
SPI0CN0_WCOL . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
C51 COMPILER V9.60.0.0   SMBUS                                                             02/10/2023 14:24:30 PAGE 26  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPI0CN0_NSSMD0 . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
PSW_CY . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
SPI0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
SPI0CN0_NSSMD1 . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BDH  2
TOFFH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
PCA0PWM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
REVID. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
__SMB_WriteRegister. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  reg. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  d. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0003H  1
v_b_mv . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_INT    -----  2
TOFFL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
FLKEY. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADC0AC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    861    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     27      11
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
